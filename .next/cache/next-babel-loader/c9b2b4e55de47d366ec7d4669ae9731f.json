{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/Pranay/Desktop/workaholic/workaholic-app/components/Tasks.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from \"./Tasks.module.scss\";\nimport Card from \"./Card\";\nimport { useForm } from \"react-hook-form\";\nimport cx from 'classnames';\n\nvar Tasks = function Tasks(props) {\n  var tasks = props.tasks,\n      deleteTask = props.deleteTask;\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      reset = _useForm.reset,\n      errors = _useForm.errors;\n\n  console.log(errors);\n\n  var onSubmit = function onSubmit(data) {\n    props.addNewTask({\n      text: data.newTask,\n      active: true\n    });\n    reset();\n  };\n\n  var toggleTask = function toggleTask(index) {\n    props.toggleTask(index);\n  };\n\n  return __jsx(Card, {\n    className: styles['tasks-card'],\n    title: \"Tasks\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles['tasks'],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: styles['tasks__list'],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, tasks.length > 0 ? tasks.map(function (task, i) {\n    return __jsx(\"div\", {\n      className: styles['tasks__item'],\n      key: i,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 19\n      }\n    }, __jsx(\"input\", {\n      name: \"isDone\",\n      type: \"checkbox\",\n      checked: !task.active,\n      onClick: function onClick() {\n        return toggleTask(i);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }\n    }), __jsx(\"div\", {\n      className: cx(_defineProperty({}, styles['tasks__item--striked'], !task.active)),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }\n    }, task.text)), __jsx(\"button\", {\n      onClick: function onClick() {\n        return deleteTask(i);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 19\n      }\n    }, \"REMOVE\"));\n  }) : __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, \"Add a new task\")), __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    name: \"newTask\",\n    type: \"text\",\n    ref: register({\n      required: true,\n      maxLength: 240\n    }),\n    placeholder: \"New Task\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }))));\n};\n\nTasks.getInitialProps = function (_ref) {\n  var store = _ref.store,\n      isServer = _ref.isServer,\n      pathname = _ref.pathname,\n      query = _ref.query;\n  store.dispatch({\n    type: 'FOO',\n    payload: 'foo'\n  }); // The component can read from the store's state when rendered\n\n  return {\n    custom: 'custom'\n  }; // You can pass some custom props to the component from here\n};\n\nexport default Tasks;","map":{"version":3,"sources":["/Users/Pranay/Desktop/workaholic/workaholic-app/components/Tasks.js"],"names":["styles","Card","useForm","cx","Tasks","props","tasks","deleteTask","register","handleSubmit","reset","errors","console","log","onSubmit","data","addNewTask","text","newTask","active","toggleTask","index","length","map","task","i","display","required","maxLength","getInitialProps","store","isServer","pathname","query","dispatch","type","payload","custom"],"mappings":"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","sourcesContent":["import styles from \"./Tasks.module.scss\";\nimport Card from \"./Card\";\nimport { useForm } from \"react-hook-form\";\nimport cx from 'classnames';\n\nconst Tasks = (props) => {\n  const { tasks, deleteTask } = props;\n  const { register, handleSubmit, reset, errors } = useForm()\n  console.log(errors)\n  const onSubmit = data => {\n    props.addNewTask({\n      text: data.newTask,\n      active: true\n    });\n    reset();\n  }\n\n  const toggleTask = index => {\n    props.toggleTask(index);\n  }\n\n  return(\n    <Card \n      className={styles['tasks-card']}\n      title={\"Tasks\"}\n    >\n      <div className={styles['tasks']}>\n        <div className={styles['tasks__list']}>\n          { tasks.length > 0 ?\n              tasks.map((task, i) => \n                <div className={styles['tasks__item']} key={i}>\n                  <div style={{display: \"flex\"}}>\n                    <input\n                      name=\"isDone\" \n                      type=\"checkbox\" \n                      checked={!task.active} \n                      onClick={() => toggleTask(i)}>\n                    </input>\n                    <div \n                      className={ cx({ [styles['tasks__item--striked']] : !task.active })}\n                    >\n                      {task.text}\n                    </div>\n                  </div>\n                  <button onClick={() => deleteTask(i)}>REMOVE</button>\n                </div>\n            ) :\n                <div>Add a new task</div>\n          }\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <input name=\"newTask\" type=\"text\" ref={register({ required:true, maxLength: 240 })} placeholder=\"New Task\"></input>\n        </form>\n      </div>\n    </Card>\n  );\n}\n\nTasks.getInitialProps = ({store, isServer, pathname, query}) => {\n  store.dispatch({ type: 'FOO', payload: 'foo' }); // The component can read from the store's state when rendered\n  return { custom: 'custom' }; // You can pass some custom props to the component from here\n}\n\nexport default Tasks;"]},"metadata":{},"sourceType":"module"}