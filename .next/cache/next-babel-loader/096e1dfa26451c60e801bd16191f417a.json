{"ast":null,"code":"var _jsxFileName = \"/Users/Pranay/Desktop/workaholic/workaholic-app/components/Tasks.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from \"./Tasks.module.scss\";\nimport Card from \"./Card\";\nimport { useForm } from \"react-hook-form\";\nimport cx from 'classnames';\n\nconst Tasks = props => {\n  const {\n    tasks,\n    deleteTask\n  } = props;\n  const {\n    register,\n    handleSubmit,\n    reset,\n    errors\n  } = useForm();\n  console.log(errors);\n\n  const onSubmit = data => {\n    props.addNewTask({\n      text: data.newTask,\n      active: true\n    });\n    reset();\n  };\n\n  const toggleTask = index => {\n    props.toggleTask(index);\n  };\n\n  return __jsx(Card, {\n    className: styles['tasks-card'],\n    title: \"Tasks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles['tasks'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: styles['tasks__list'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, tasks.map((task, i) => __jsx(\"div\", {\n    className: styles['tasks__item'],\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, __jsx(\"input\", {\n    name: \"isDone\",\n    type: \"checkbox\",\n    checked: !task.active,\n    onClick: () => toggleTask(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 19\n    }\n  }), __jsx(\"div\", {\n    className: cx({\n      [styles['tasks__item--striked']]: !task.active\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 19\n    }\n  }, task.text)), __jsx(\"button\", {\n    onClick: () => deleteTask(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }, \"REMOVE\")))), __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    name: \"newTask\",\n    type: \"text\",\n    ref: register({\n      required: true,\n      maxLength: 240\n    }),\n    placeholder: \"New Task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }))));\n};\n\nTasks.getInitialProps = ({\n  store,\n  isServer,\n  pathname,\n  query\n}) => {\n  store.dispatch({\n    type: 'FOO',\n    payload: 'foo'\n  }); // The component can read from the store's state when rendered\n\n  return {\n    custom: 'custom'\n  }; // You can pass some custom props to the component from here\n};\n\nexport default Tasks;","map":{"version":3,"sources":["/Users/Pranay/Desktop/workaholic/workaholic-app/components/Tasks.js"],"names":["styles","Card","useForm","cx","Tasks","props","tasks","deleteTask","register","handleSubmit","reset","errors","console","log","onSubmit","data","addNewTask","text","newTask","active","toggleTask","index","map","task","i","display","required","maxLength","getInitialProps","store","isServer","pathname","query","dispatch","type","payload","custom"],"mappings":"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","sourcesContent":["import styles from \"./Tasks.module.scss\";\nimport Card from \"./Card\";\nimport { useForm } from \"react-hook-form\";\nimport cx from 'classnames';\n\nconst Tasks = (props) => {\n  const { tasks, deleteTask } = props;\n  const { register, handleSubmit, reset, errors } = useForm()\n  console.log(errors)\n  const onSubmit = data => {\n    props.addNewTask({\n      text: data.newTask,\n      active: true\n    });\n    reset();\n  }\n\n  const toggleTask = index => {\n    props.toggleTask(index);\n  }\n\n  return(\n    <Card \n      className={styles['tasks-card']}\n      title={\"Tasks\"}\n    >\n      <div className={styles['tasks']}>\n        <div className={styles['tasks__list']}>\n          { tasks.map((task, i) => \n              <div className={styles['tasks__item']} key={i}>\n                <div style={{display: \"flex\"}}>\n                  <input\n                    name=\"isDone\" \n                    type=\"checkbox\" \n                    checked={!task.active} \n                    onClick={() => toggleTask(i)}>\n                  </input>\n                  <div \n                    className={ cx({ [styles['tasks__item--striked']] : !task.active })}\n                  >\n                    {task.text}\n                  </div>\n                </div>\n                <button onClick={() => deleteTask(i)}>REMOVE</button>\n              </div>\n            )\n          }\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          {/* <Controller as={InputField} name=\"newTask\" control={control} defaultValue=\"\" /> */}\n          <input name=\"newTask\" type=\"text\" ref={register({ required:true, maxLength: 240 })} placeholder=\"New Task\"></input>\n          {/* {errors.exampleRequired && <span>This field is required</span>} */}\n        </form>\n      </div>\n    </Card>\n  );\n}\n\nTasks.getInitialProps = ({store, isServer, pathname, query}) => {\n  store.dispatch({ type: 'FOO', payload: 'foo' }); // The component can read from the store's state when rendered\n  return { custom: 'custom' }; // You can pass some custom props to the component from here\n}\n\nexport default Tasks;"]},"metadata":{},"sourceType":"module"}