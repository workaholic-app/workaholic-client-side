{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SET_VISIBILITY_FILTER, ADD_TASK, TOGGLE_TASK, DELETE_TASK, VisibilityFilters } from '../actions/tasks';\nconst initialState = {\n  visibilityFilter: VisibilityFilters.SHOW_ALL,\n  tasks: []\n};\nexport function tasks(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TASK:\n      return _objectSpread({}, state, {\n        tasks: [...state.tasks, action.newTask]\n      });\n\n    case TOGGLE_TASK:\n      let task = state.tasks[action.index];\n      return _objectSpread({}, state, {\n        tasks: [...state.tasks.slice(0, action.index), _objectSpread({}, task, {\n          active: !task.active\n        }), ...state.tasks.slice(action.index + 1)]\n      });\n\n    case DELETE_TASK:\n      return _objectSpread({}, state, {\n        tasks: [...state.tasks.slice(0, action.index), ...state.tasks.slice(action.index + 1)]\n      });\n\n    case SET_VISIBILITY_FILTER:\n      return _objectSpread({}, state, {\n        visibilityFilter: action.filter\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/Pranay/Desktop/workaholic/workaholic-app/reducers/tasks.js"],"names":["SET_VISIBILITY_FILTER","ADD_TASK","TOGGLE_TASK","DELETE_TASK","VisibilityFilters","initialState","visibilityFilter","SHOW_ALL","tasks","state","action","type","newTask","task","index","slice","active","filter"],"mappings":";;;;;;AAAA,SACEA,qBADF,EAEEC,QAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,iBALF,QAMQ,kBANR;AAQA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,gBAAgB,EAAEF,iBAAiB,CAACG,QADjB;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;AAKA,OAAO,SAASA,KAAT,CAAeC,KAAK,GAAGJ,YAAvB,EAAqCK,MAArC,EAA6C;AAClD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,QAAL;AACE,+BACKQ,KADL;AAEED,QAAAA,KAAK,EAAE,CAAE,GAAGC,KAAK,CAACD,KAAX,EAAkBE,MAAM,CAACE,OAAzB;AAFT;;AAIF,SAAKV,WAAL;AACE,UAAIW,IAAI,GAAGJ,KAAK,CAACD,KAAN,CAAYE,MAAM,CAACI,KAAnB,CAAX;AACA,+BACKL,KADL;AAEED,QAAAA,KAAK,EAAE,CAAC,GAAGC,KAAK,CAACD,KAAN,CAAYO,KAAZ,CAAkB,CAAlB,EAAqBL,MAAM,CAACI,KAA5B,CAAJ,oBAA6CD,IAA7C;AAAmDG,UAAAA,MAAM,EAAE,CAACH,IAAI,CAACG;AAAjE,YAA0E,GAAGP,KAAK,CAACD,KAAN,CAAYO,KAAZ,CAAkBL,MAAM,CAACI,KAAP,GAAe,CAAjC,CAA7E;AAFT;;AAIF,SAAKX,WAAL;AACI,+BACKM,KADL;AAEED,QAAAA,KAAK,EAAE,CAAC,GAAGC,KAAK,CAACD,KAAN,CAAYO,KAAZ,CAAkB,CAAlB,EAAqBL,MAAM,CAACI,KAA5B,CAAJ,EAAwC,GAAGL,KAAK,CAACD,KAAN,CAAYO,KAAZ,CAAkBL,MAAM,CAACI,KAAP,GAAe,CAAjC,CAA3C;AAFT;;AAIJ,SAAKd,qBAAL;AACE,+BACKS,KADL;AAEEH,QAAAA,gBAAgB,EAAEI,MAAM,CAACO;AAF3B;;AAIF;AAAS,aAAOR,KAAP;AAtBX;AAwBD","sourcesContent":["import { \n  SET_VISIBILITY_FILTER,\n  ADD_TASK,\n  TOGGLE_TASK,\n  DELETE_TASK,\n  VisibilityFilters\n } from '../actions/tasks';\n\nconst initialState = {\n  visibilityFilter: VisibilityFilters.SHOW_ALL,\n  tasks: []\n}\n\nexport function tasks(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TASK:\n      return {\n        ...state,\n        tasks: [ ...state.tasks, action.newTask ],\n      }\n    case TOGGLE_TASK:\n      let task = state.tasks[action.index];\n      return {\n        ...state,\n        tasks: [...state.tasks.slice(0, action.index), { ...task, active: !task.active}, ...state.tasks.slice(action.index + 1)]\n      }\n    case DELETE_TASK:\n        return {\n          ...state,\n          tasks: [...state.tasks.slice(0, action.index), ...state.tasks.slice(action.index + 1)]\n        }\n    case SET_VISIBILITY_FILTER:\n      return { \n        ...state, \n        visibilityFilter: action.filter\n      }\n    default: return state\n  }\n}"]},"metadata":{},"sourceType":"module"}