{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { NEW_NOTE, OPEN_NEW_NOTE_MODAL } from '../actions/notes';\nconst initialState = {\n  notes: [{\n    id: 0,\n    title: \"First Note\",\n    content: \"Hello World\"\n  }],\n  openNote: null,\n  isEditing: false\n};\nexport function notes(state = initialState, action) {\n  switch (action.type) {\n    case NEW_NOTE:\n      return _objectSpread({}, state, {\n        notes: [...state.notes, action.note]\n      });\n\n    case OPEN_NEW_NOTE_MODAL:\n      return _objectSpread({}, state, {\n        isEditing: true\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/Pranay/Desktop/workaholic/workaholic-app/reducers/notes.js"],"names":["NEW_NOTE","OPEN_NEW_NOTE_MODAL","initialState","notes","id","title","content","openNote","isEditing","state","action","type","note"],"mappings":";;;;;;AAAA,SACEA,QADF,EAEEC,mBAFF,QAGO,kBAHP;AAKA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CAAC;AAAEC,IAAAA,EAAE,EAAC,CAAL;AAAQC,IAAAA,KAAK,EAAE,YAAf;AAA6BC,IAAAA,OAAO,EAAE;AAAtC,GAAD,CADY;AAEnBC,EAAAA,QAAQ,EAAE,IAFS;AAGnBC,EAAAA,SAAS,EAAE;AAHQ,CAArB;AAMA,OAAO,SAASL,KAAT,CAAeM,KAAK,GAAGP,YAAvB,EAAqCQ,MAArC,EAA6C;AAClD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,QAAL;AACE,+BAAYS,KAAZ;AAAmBN,QAAAA,KAAK,EAAE,CAAE,GAAGM,KAAK,CAACN,KAAX,EAAkBO,MAAM,CAACE,IAAzB;AAA1B;;AACF,SAAKX,mBAAL;AACE,+BAAYQ,KAAZ;AAAmBD,QAAAA,SAAS,EAAE;AAA9B;;AACF;AAAS,aAAOC,KAAP;AALX;AAOD","sourcesContent":["import { \n  NEW_NOTE,\n  OPEN_NEW_NOTE_MODAL\n} from '../actions/notes';\n\nconst initialState = {\n  notes: [{ id:0, title: \"First Note\", content: \"Hello World\"}],\n  openNote: null,\n  isEditing: false\n}\n\nexport function notes(state = initialState, action) {\n  switch (action.type) {\n    case NEW_NOTE:\n      return { ...state, notes: [ ...state.notes, action.note ] };\n    case OPEN_NEW_NOTE_MODAL:\n      return { ...state, isEditing: true }\n    default: return state\n  }\n}"]},"metadata":{},"sourceType":"module"}